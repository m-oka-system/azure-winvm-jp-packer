name: Use Packer to create a Japanese-language image of an Azure Windows VM

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      image_version:
        description: "VM image version name for the semantic version pattern."
        required: true
        type: string
        default: "1.0.0"

permissions:
  id-token: write
  contents: read

env:
  PKR_VAR_project: ${{ vars.PROJECT }}
  PKR_VAR_location: ${{ vars.LOCATION }}
  PKR_VAR_resource_group_name: ${{ vars.RESOURCE_GROUP_NAME }}
  PKR_VAR_vm_size: ${{ vars.VM_SIZE }}
  PKR_VAR_gallery_name: ${{ vars.GALLERY_NAME }}
  PKR_VAR_image_definition: ${{ vars.IMAGE_DEFINITION }}
  PKR_VAR_image_version: ${{ inputs.image_version }}
  PKR_VAR_replication_regions: ${{ vars.REPLICATION_REGIONS }}
  PKR_VAR_winrm_password: ${{ secrets.WINRM_PASSWORD }}
  keep_latest_count: ${{vars.KEEP_LATEST_COUNT}}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get runner's Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: packer validate
        run: packer validate -var 'inbound_ip_addresses=["${{ steps.ip.outputs.ipv4 }}"]' .

      - name: packer build
        run: packer build -var 'inbound_ip_addresses=["${{ steps.ip.outputs.ipv4 }}"]' .

      - name: Delete versions of images prior to the specified number
        uses: Azure/powershell@v1
        with:
          inlineScript: |
            $imageVersions = Get-AzGalleryImageVersion -ResourceGroupName ${{ env.PKR_VAR_resource_group_name }} -GalleryName ${{ env.PKR_VAR_gallery_name }} -GalleryImageDefinitionName ${{ env.PKR_VAR_image_definition }}
            if ($imageVersions.Count -gt ${{ env.keep_latest_count }}) {
                $sortedImageVersions = $imageVersions | Sort-Object { $_.PublishingProfile.PublishedDate } -Descending
                for ($i = ${{ env.keep_latest_count }}; $i -lt $sortedImageVersions.Count; $i++) {
                    $imageVersion = $sortedImageVersions[$i]
                    Remove-AzGalleryImageVersion -ResourceGroupName ${{ env.PKR_VAR_resource_group_name }} -GalleryName ${{ env.PKR_VAR_gallery_name }} -GalleryImageDefinitionName ${{ env.PKR_VAR_image_definition }} -Name $imageVersion.Name -Force
                }
            }
          azPSVersion: "latest"

      - name: logout
        run: |
          az logout
